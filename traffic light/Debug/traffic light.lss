
traffic light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000562  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000562  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000594  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000129b  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1c  00000000  00000000  000019eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c87  00000000  00000000  00002407  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a4  00000000  00000000  00003090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fb  00000000  00000000  00003334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c5  00000000  00000000  0000392f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000040f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <main>
  74:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <App_init>:
// driver functions
//initialization of car traffic LEDs
void App_init()
{
	// car traffic
	LED_init('A',RED); // RED
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 4c 01 	call	0x298	; 0x298 <LED_init>
	LED_init('A',YELLOW); // YELLOW
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 4c 01 	call	0x298	; 0x298 <LED_init>
	LED_init('A',GREEN); // GREEN
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 4c 01 	call	0x298	; 0x298 <LED_init>

	// pedestrian traffic
	LED_init('B',RED); // RED
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 4c 01 	call	0x298	; 0x298 <LED_init>
	LED_init('B',YELLOW); // YELLOW
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 4c 01 	call	0x298	; 0x298 <LED_init>
	LED_init('B',GREEN); // GREEN
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 4c 01 	call	0x298	; 0x298 <LED_init>
	
	BUTTON_init('D',2);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 48 01 	call	0x290	; 0x290 <BUTTON_init>
	
	Timer_set(NORMAL,0);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Timer_set>

	interrupt_globle_enable();		// enable interrupts in all ATmega 32
  bc:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <interrupt_globle_enable>
	interrupt_sense(RAISING_EEDGE); // choose detection mode
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <interrupt_sense>
	interrupt_enable();				// start interrupt listening
  c6:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <interrupt_enable>
  ca:	08 95       	ret

000000cc <APP_start>:

// driver functions
//-- system flow function
void APP_start()
{
	switch(next_state)
  cc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d0:	81 30       	cpi	r24, 0x01	; 1
  d2:	b9 f0       	breq	.+46     	; 0x102 <APP_start+0x36>
  d4:	28 f0       	brcs	.+10     	; 0xe0 <APP_start+0x14>
  d6:	82 30       	cpi	r24, 0x02	; 2
  d8:	31 f1       	breq	.+76     	; 0x126 <APP_start+0x5a>
  da:	83 30       	cpi	r24, 0x03	; 3
  dc:	b1 f1       	breq	.+108    	; 0x14a <APP_start+0x7e>
  de:	08 95       	ret
	{
		case 0:
		{
			current_state = 0;
  e0:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <current_state>
			LED_on(CAR,RED);
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	81 e4       	ldi	r24, 0x41	; 65
  e8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED_on>
			LED_on(Pedestrian,GREEN);
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	82 e4       	ldi	r24, 0x42	; 66
  f0:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED_on>
			Timer_start_stop(prescaler_1024);
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	0e 94 27 02 	call	0x44e	; 0x44e <Timer_start_stop>
			next_state = 5;	
  fa:	85 e0       	ldi	r24, 0x05	; 5
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		break;
 100:	08 95       	ret

		case 1:
		{
			current_state = 1;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <current_state>
			LED_on(CAR,YELLOW);
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	81 e4       	ldi	r24, 0x41	; 65
 10c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED_on>
			LED_on(Pedestrian,YELLOW);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	82 e4       	ldi	r24, 0x42	; 66
 114:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED_on>
			Timer_start_stop(prescaler_1024);
 118:	85 e0       	ldi	r24, 0x05	; 5
 11a:	0e 94 27 02 	call	0x44e	; 0x44e <Timer_start_stop>
			next_state = 5;
 11e:	85 e0       	ldi	r24, 0x05	; 5
 120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		break;
 124:	08 95       	ret

		case 2:
		{
			current_state = 2;
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <current_state>
			LED_on(CAR,GREEN);
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	81 e4       	ldi	r24, 0x41	; 65
 130:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED_on>
			LED_on(Pedestrian,RED);
 134:	60 e0       	ldi	r22, 0x00	; 0
 136:	82 e4       	ldi	r24, 0x42	; 66
 138:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED_on>
			Timer_start_stop(prescaler_1024);
 13c:	85 e0       	ldi	r24, 0x05	; 5
 13e:	0e 94 27 02 	call	0x44e	; 0x44e <Timer_start_stop>
			next_state = 5;
 142:	85 e0       	ldi	r24, 0x05	; 5
 144:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
		break;
 148:	08 95       	ret

		case 3:
		{
			current_state = 3;
 14a:	83 e0       	ldi	r24, 0x03	; 3
 14c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <current_state>
			LED_on(CAR,YELLOW);
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	81 e4       	ldi	r24, 0x41	; 65
 154:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED_on>
			LED_on(Pedestrian,YELLOW);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	82 e4       	ldi	r24, 0x42	; 66
 15c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED_on>
			Timer_start_stop(prescaler_1024);
 160:	85 e0       	ldi	r24, 0x05	; 5
 162:	0e 94 27 02 	call	0x44e	; 0x44e <Timer_start_stop>
			next_state = 5;
 166:	85 e0       	ldi	r24, 0x05	; 5
 168:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 16c:	08 95       	ret

0000016e <__vector_11>:
}


// timer 0 interrupt function
ISR(TIMER_0)
{
 16e:	1f 92       	push	r1
 170:	0f 92       	push	r0
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	0f 92       	push	r0
 176:	11 24       	eor	r1, r1
 178:	2f 93       	push	r18
 17a:	3f 93       	push	r19
 17c:	4f 93       	push	r20
 17e:	5f 93       	push	r21
 180:	6f 93       	push	r22
 182:	7f 93       	push	r23
 184:	8f 93       	push	r24
 186:	9f 93       	push	r25
 188:	af 93       	push	r26
 18a:	bf 93       	push	r27
 18c:	ef 93       	push	r30
 18e:	ff 93       	push	r31
	if(ovf_counter > 17)
 190:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ovf_counter>
 194:	82 31       	cpi	r24, 0x12	; 18
 196:	08 f4       	brcc	.+2      	; 0x19a <__vector_11+0x2c>
 198:	49 c0       	rjmp	.+146    	; 0x22c <__vector_11+0xbe>
	{
		ovf_counter = 0;
 19a:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <ovf_counter>
		Timer_clear_state();
 19e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <Timer_clear_state>
		switch(current_state)
 1a2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <current_state>
 1a6:	81 30       	cpi	r24, 0x01	; 1
 1a8:	a9 f0       	breq	.+42     	; 0x1d4 <__vector_11+0x66>
 1aa:	28 f0       	brcs	.+10     	; 0x1b6 <__vector_11+0x48>
 1ac:	82 30       	cpi	r24, 0x02	; 2
 1ae:	09 f1       	breq	.+66     	; 0x1f2 <__vector_11+0x84>
 1b0:	83 30       	cpi	r24, 0x03	; 3
 1b2:	71 f1       	breq	.+92     	; 0x210 <__vector_11+0xa2>
 1b4:	52 c0       	rjmp	.+164    	; 0x25a <__vector_11+0xec>
		{
			case 0:
			{
				LED_off(CAR,RED);
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	81 e4       	ldi	r24, 0x41	; 65
 1ba:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_off>
				LED_off(Pedestrian,GREEN);
 1be:	62 e0       	ldi	r22, 0x02	; 2
 1c0:	82 e4       	ldi	r24, 0x42	; 66
 1c2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_off>
				Timer_start_stop(Stop);
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 27 02 	call	0x44e	; 0x44e <Timer_start_stop>
				next_state = 1;
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			break;
 1d2:	43 c0       	rjmp	.+134    	; 0x25a <__vector_11+0xec>

			case 1:
			{
				LED_off(CAR,YELLOW);
 1d4:	61 e0       	ldi	r22, 0x01	; 1
 1d6:	81 e4       	ldi	r24, 0x41	; 65
 1d8:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_off>
				LED_off(Pedestrian,YELLOW);
 1dc:	61 e0       	ldi	r22, 0x01	; 1
 1de:	82 e4       	ldi	r24, 0x42	; 66
 1e0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_off>
				Timer_start_stop(Stop);
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 27 02 	call	0x44e	; 0x44e <Timer_start_stop>
				next_state = 2;
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			break;
 1f0:	34 c0       	rjmp	.+104    	; 0x25a <__vector_11+0xec>

			case 2:
			{
				LED_off(CAR,GREEN);
 1f2:	62 e0       	ldi	r22, 0x02	; 2
 1f4:	81 e4       	ldi	r24, 0x41	; 65
 1f6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_off>
				LED_off(Pedestrian,RED);
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	82 e4       	ldi	r24, 0x42	; 66
 1fe:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_off>
				Timer_start_stop(Stop);
 202:	80 e0       	ldi	r24, 0x00	; 0
 204:	0e 94 27 02 	call	0x44e	; 0x44e <Timer_start_stop>
				next_state = 3;
 208:	83 e0       	ldi	r24, 0x03	; 3
 20a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			break;
 20e:	25 c0       	rjmp	.+74     	; 0x25a <__vector_11+0xec>

			case 3:
			{
				LED_off(CAR,YELLOW);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	81 e4       	ldi	r24, 0x41	; 65
 214:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_off>
				LED_off(Pedestrian,YELLOW);
 218:	61 e0       	ldi	r22, 0x01	; 1
 21a:	82 e4       	ldi	r24, 0x42	; 66
 21c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LED_off>
				Timer_start_stop(Stop);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 27 02 	call	0x44e	; 0x44e <Timer_start_stop>
				next_state = 0;
 226:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			break;			
 22a:	17 c0       	rjmp	.+46     	; 0x25a <__vector_11+0xec>
		}
	}
	else if(current_state == 1 || current_state == 3)
 22c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <current_state>
 230:	91 30       	cpi	r25, 0x01	; 1
 232:	11 f0       	breq	.+4      	; 0x238 <__vector_11+0xca>
 234:	93 30       	cpi	r25, 0x03	; 3
 236:	71 f4       	brne	.+28     	; 0x254 <__vector_11+0xe6>
	{
		LED_toggle(CAR,YELLOW);
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	81 e4       	ldi	r24, 0x41	; 65
 23c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_toggle>
		LED_toggle(Pedestrian,YELLOW);	
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	82 e4       	ldi	r24, 0x42	; 66
 244:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LED_toggle>
		ovf_counter++;
 248:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ovf_counter>
 24c:	8f 5f       	subi	r24, 0xFF	; 255
 24e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ovf_counter>
 252:	03 c0       	rjmp	.+6      	; 0x25a <__vector_11+0xec>
			
	}
	else
	{
		ovf_counter++;	
 254:	8f 5f       	subi	r24, 0xFF	; 255
 256:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ovf_counter>
	//	Timer_clear_state();
	}
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_1>:

ISR(EXT_INT_0)
{
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
	
}
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <BUTTON_init>:

// driver functions
//initialization of Button port pins
void BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
	DIO_init(buttonPort,buttonPin,IN);
 290:	40 e0       	ldi	r20, 0x00	; 0
 292:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_init>
 296:	08 95       	ret

00000298 <LED_init>:

// driver functions
//initialization of LED port pins
void LED_init(uint8_t ledport, uint8_t ledpin)
{
	DIO_init(ledport,ledpin,OUT);
 298:	41 e0       	ldi	r20, 0x01	; 1
 29a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <DIO_init>
 29e:	08 95       	ret

000002a0 <LED_on>:
}

//writing high into LED port pins
void LED_on(uint8_t ledport, uint8_t ledpin)
{
	DIO_write(ledport,ledpin,HIGH);
 2a0:	41 e0       	ldi	r20, 0x01	; 1
 2a2:	0e 94 9d 01 	call	0x33a	; 0x33a <DIO_write>
 2a6:	08 95       	ret

000002a8 <LED_off>:
}

//writing low into LED port pins
void LED_off(uint8_t ledport, uint8_t ledpin)
{
	DIO_write(ledport,ledpin,LOW);
 2a8:	40 e0       	ldi	r20, 0x00	; 0
 2aa:	0e 94 9d 01 	call	0x33a	; 0x33a <DIO_write>
 2ae:	08 95       	ret

000002b0 <LED_toggle>:
}

//toggle state of LED port pins
void LED_toggle(uint8_t ledport, uint8_t ledpin)
{
	DIO_toggle(ledport,ledpin);
 2b0:	0e 94 c2 01 	call	0x384	; 0x384 <DIO_toggle>
 2b4:	08 95       	ret

000002b6 <main>:

int main(void)
{
	//uint8_t value = 0;

	App_init();
 2b6:	0e 94 3e 00 	call	0x7c	; 0x7c <App_init>

	/* Replace with your application code */
    while (1) 
    {
		APP_start();
 2ba:	0e 94 66 00 	call	0xcc	; 0xcc <APP_start>
 2be:	fd cf       	rjmp	.-6      	; 0x2ba <main+0x4>

000002c0 <wihch_port>:
#include "drivers_dio.h"

// function take PORTnum and search for PORTX & return pointer to its PIN address
volatile PORT_REGS* wihch_port(uint8_t PORTnum)
{
	switch(PORTnum)
 2c0:	82 34       	cpi	r24, 0x42	; 66
 2c2:	99 f0       	breq	.+38     	; 0x2ea <wihch_port+0x2a>
 2c4:	18 f4       	brcc	.+6      	; 0x2cc <wihch_port+0xc>
 2c6:	81 34       	cpi	r24, 0x41	; 65
 2c8:	69 f0       	breq	.+26     	; 0x2e4 <wihch_port+0x24>
 2ca:	0b c0       	rjmp	.+22     	; 0x2e2 <wihch_port+0x22>
 2cc:	83 34       	cpi	r24, 0x43	; 67
 2ce:	19 f0       	breq	.+6      	; 0x2d6 <wihch_port+0x16>
 2d0:	84 34       	cpi	r24, 0x44	; 68
 2d2:	21 f0       	breq	.+8      	; 0x2dc <wihch_port+0x1c>
 2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <wihch_port+0x22>
	{
		case 'A':return PORTA;break;
		case 'B':return PORTB;break;
		case 'C':return PORTC;break;
 2d6:	83 e3       	ldi	r24, 0x33	; 51
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	08 95       	ret
		case 'D':return PORTD;break;
 2dc:	80 e3       	ldi	r24, 0x30	; 48
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	08 95       	ret
	}
}
 2e2:	08 95       	ret
// function take PORTnum and search for PORTX & return pointer to its PIN address
volatile PORT_REGS* wihch_port(uint8_t PORTnum)
{
	switch(PORTnum)
	{
		case 'A':return PORTA;break;
 2e4:	89 e3       	ldi	r24, 0x39	; 57
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	08 95       	ret
		case 'B':return PORTB;break;
 2ea:	86 e3       	ldi	r24, 0x36	; 54
 2ec:	90 e0       	ldi	r25, 0x00	; 0
		case 'C':return PORTC;break;
		case 'D':return PORTD;break;
	}
}
 2ee:	08 95       	ret

000002f0 <DIO_init>:

// driver functions definitions
//--initialization of DIO port pins
void DIO_init(uint8_t PORTnum, uint8_t PINnum, uint8_t dir)
{
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	d6 2f       	mov	r29, r22
 2f6:	c4 2f       	mov	r28, r20
	volatile PORT_REGS* PORT_G = 0;
	PORT_G = wihch_port(PORTnum);
 2f8:	0e 94 60 01 	call	0x2c0	; 0x2c0 <wihch_port>
	
	if(dir == OUT)
 2fc:	c1 30       	cpi	r28, 0x01	; 1
 2fe:	61 f4       	brne	.+24     	; 0x318 <DIO_init+0x28>
	SETBIT(PORT_G->DDR,PINnum);
 300:	fc 01       	movw	r30, r24
 302:	41 81       	ldd	r20, Z+1	; 0x01
 304:	21 e0       	ldi	r18, 0x01	; 1
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <DIO_init+0x1e>
 30a:	22 0f       	add	r18, r18
 30c:	33 1f       	adc	r19, r19
 30e:	da 95       	dec	r29
 310:	e2 f7       	brpl	.-8      	; 0x30a <DIO_init+0x1a>
 312:	24 2b       	or	r18, r20
 314:	21 83       	std	Z+1, r18	; 0x01
 316:	0e c0       	rjmp	.+28     	; 0x334 <DIO_init+0x44>
	else if(dir==IN)
 318:	c1 11       	cpse	r28, r1
 31a:	0c c0       	rjmp	.+24     	; 0x334 <DIO_init+0x44>
	CLEARBIT(PORT_G->DDR,PINnum);
 31c:	fc 01       	movw	r30, r24
 31e:	41 81       	ldd	r20, Z+1	; 0x01
 320:	21 e0       	ldi	r18, 0x01	; 1
 322:	30 e0       	ldi	r19, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_init+0x3a>
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	da 95       	dec	r29
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_init+0x36>
 32e:	20 95       	com	r18
 330:	24 23       	and	r18, r20
 332:	21 83       	std	Z+1, r18	; 0x01
}
 334:	df 91       	pop	r29
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <DIO_write>:

//--writing into DIO port pins
void DIO_write(uint8_t PORTnum, uint8_t PINnum, uint8_t val)
{
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	d6 2f       	mov	r29, r22
 340:	c4 2f       	mov	r28, r20
	
	volatile PORT_REGS* PORT_G = 0;
	PORT_G = wihch_port(PORTnum);
 342:	0e 94 60 01 	call	0x2c0	; 0x2c0 <wihch_port>

	if(val==HIGH)
 346:	c1 30       	cpi	r28, 0x01	; 1
 348:	61 f4       	brne	.+24     	; 0x362 <DIO_write+0x28>
	SETBIT(PORT_G->PORT,PINnum);
 34a:	fc 01       	movw	r30, r24
 34c:	42 81       	ldd	r20, Z+2	; 0x02
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_write+0x1e>
 354:	22 0f       	add	r18, r18
 356:	33 1f       	adc	r19, r19
 358:	da 95       	dec	r29
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_write+0x1a>
 35c:	24 2b       	or	r18, r20
 35e:	22 83       	std	Z+2, r18	; 0x02
 360:	0e c0       	rjmp	.+28     	; 0x37e <DIO_write+0x44>
	else if(val==LOW)
 362:	c1 11       	cpse	r28, r1
 364:	0c c0       	rjmp	.+24     	; 0x37e <DIO_write+0x44>
	CLEARBIT(PORT_G->PORT,PINnum);
 366:	fc 01       	movw	r30, r24
 368:	42 81       	ldd	r20, Z+2	; 0x02
 36a:	21 e0       	ldi	r18, 0x01	; 1
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_write+0x3a>
 370:	22 0f       	add	r18, r18
 372:	33 1f       	adc	r19, r19
 374:	da 95       	dec	r29
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_write+0x36>
 378:	20 95       	com	r18
 37a:	24 23       	and	r18, r20
 37c:	22 83       	std	Z+2, r18	; 0x02
}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	08 95       	ret

00000384 <DIO_toggle>:

//--toggle state of DIO port pins
void DIO_toggle(uint8_t PORTnum, uint8_t PINnum)
{
 384:	cf 93       	push	r28
 386:	c6 2f       	mov	r28, r22
	volatile PORT_REGS* PORT_G = 0;
	PORT_G = wihch_port(PORTnum);
 388:	0e 94 60 01 	call	0x2c0	; 0x2c0 <wihch_port>
	
	TOGGLEBIT(PORT_G->PORT,PINnum);
 38c:	fc 01       	movw	r30, r24
 38e:	42 81       	ldd	r20, Z+2	; 0x02
 390:	21 e0       	ldi	r18, 0x01	; 1
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_toggle+0x16>
 396:	22 0f       	add	r18, r18
 398:	33 1f       	adc	r19, r19
 39a:	ca 95       	dec	r28
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_toggle+0x12>
 39e:	24 27       	eor	r18, r20
 3a0:	22 83       	std	Z+2, r18	; 0x02
}
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <interrupt_globle_enable>:
}

//--disable global interrupt in micro controller
void interrupt_globle_disable()
{
	CLEARBIT(SREG,7);
 3a6:	8f b7       	in	r24, 0x3f	; 63
 3a8:	80 68       	ori	r24, 0x80	; 128
 3aa:	8f bf       	out	0x3f, r24	; 63
 3ac:	08 95       	ret

000003ae <interrupt_sense>:
}

//--choose detection flags mode
void interrupt_sense(uint8_t sense)
{
	switch(sense)
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	69 f0       	breq	.+26     	; 0x3cc <interrupt_sense+0x1e>
 3b2:	28 f0       	brcs	.+10     	; 0x3be <interrupt_sense+0x10>
 3b4:	82 30       	cpi	r24, 0x02	; 2
 3b6:	89 f0       	breq	.+34     	; 0x3da <interrupt_sense+0x2c>
 3b8:	83 30       	cpi	r24, 0x03	; 3
 3ba:	b1 f0       	breq	.+44     	; 0x3e8 <interrupt_sense+0x3a>
 3bc:	08 95       	ret
	{
		case LOW_LEVEL:
		{
			CLEARBIT(MCUCR,0); // ISC00 == 0
 3be:	85 b7       	in	r24, 0x35	; 53
 3c0:	8e 7f       	andi	r24, 0xFE	; 254
 3c2:	85 bf       	out	0x35, r24	; 53
			CLEARBIT(MCUCR,1); // ISC01 == 0
 3c4:	85 b7       	in	r24, 0x35	; 53
 3c6:	8d 7f       	andi	r24, 0xFD	; 253
 3c8:	85 bf       	out	0x35, r24	; 53
		}
		break;
 3ca:	08 95       	ret
		
		case ANY:
		{
			SETBIT(MCUCR,0);   // ISC00 == 1
 3cc:	85 b7       	in	r24, 0x35	; 53
 3ce:	81 60       	ori	r24, 0x01	; 1
 3d0:	85 bf       	out	0x35, r24	; 53
			CLEARBIT(MCUCR,1); // ISC01 == 0
 3d2:	85 b7       	in	r24, 0x35	; 53
 3d4:	8d 7f       	andi	r24, 0xFD	; 253
 3d6:	85 bf       	out	0x35, r24	; 53
		}
		break;
 3d8:	08 95       	ret
		
		case FALLING_EDGE:
		{
			CLEARBIT(MCUCR,0);  // ISC00 == 0
 3da:	85 b7       	in	r24, 0x35	; 53
 3dc:	8e 7f       	andi	r24, 0xFE	; 254
 3de:	85 bf       	out	0x35, r24	; 53
			SETBIT(MCUCR,1);	// ISC01 == 1
 3e0:	85 b7       	in	r24, 0x35	; 53
 3e2:	82 60       	ori	r24, 0x02	; 2
 3e4:	85 bf       	out	0x35, r24	; 53
		}
		break;
 3e6:	08 95       	ret
		
		case RAISING_EEDGE:
		{
			SETBIT(MCUCR,0); // ISC00 == 1
 3e8:	85 b7       	in	r24, 0x35	; 53
 3ea:	81 60       	ori	r24, 0x01	; 1
 3ec:	85 bf       	out	0x35, r24	; 53
			SETBIT(MCUCR,1); // ISC01 == 1
 3ee:	85 b7       	in	r24, 0x35	; 53
 3f0:	82 60       	ori	r24, 0x02	; 2
 3f2:	85 bf       	out	0x35, r24	; 53
 3f4:	08 95       	ret

000003f6 <interrupt_enable>:
}

//--enable specific interrupt we will use in micro controller
void interrupt_enable()
{
	SETBIT(GICR,6); // start listening by interrupt
 3f6:	8b b7       	in	r24, 0x3b	; 59
 3f8:	80 64       	ori	r24, 0x40	; 64
 3fa:	8b bf       	out	0x3b, r24	; 59
 3fc:	08 95       	ret

000003fe <Timer_set>:
}

// get timer state
void Timer_check_state(uint8_t* ovf)
{
	*ovf = GETBIT(TIFR,0);
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	69 f0       	breq	.+26     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 402:	28 f0       	brcs	.+10     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 404:	82 30       	cpi	r24, 0x02	; 2
 406:	89 f0       	breq	.+34     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 408:	83 30       	cpi	r24, 0x03	; 3
 40a:	b1 f0       	breq	.+44     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 40c:	1b c0       	rjmp	.+54     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 40e:	83 b7       	in	r24, 0x33	; 51
 410:	8f 7b       	andi	r24, 0xBF	; 191
 412:	83 bf       	out	0x33, r24	; 51
 414:	83 b7       	in	r24, 0x33	; 51
 416:	87 7f       	andi	r24, 0xF7	; 247
 418:	83 bf       	out	0x33, r24	; 51
 41a:	14 c0       	rjmp	.+40     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 41c:	83 b7       	in	r24, 0x33	; 51
 41e:	80 64       	ori	r24, 0x40	; 64
 420:	83 bf       	out	0x33, r24	; 51
 422:	83 b7       	in	r24, 0x33	; 51
 424:	87 7f       	andi	r24, 0xF7	; 247
 426:	83 bf       	out	0x33, r24	; 51
 428:	0d c0       	rjmp	.+26     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 42a:	83 b7       	in	r24, 0x33	; 51
 42c:	8f 7b       	andi	r24, 0xBF	; 191
 42e:	83 bf       	out	0x33, r24	; 51
 430:	83 b7       	in	r24, 0x33	; 51
 432:	88 60       	ori	r24, 0x08	; 8
 434:	83 bf       	out	0x33, r24	; 51
 436:	06 c0       	rjmp	.+12     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 438:	83 b7       	in	r24, 0x33	; 51
 43a:	80 64       	ori	r24, 0x40	; 64
 43c:	83 bf       	out	0x33, r24	; 51
 43e:	83 b7       	in	r24, 0x33	; 51
 440:	88 60       	ori	r24, 0x08	; 8
 442:	83 bf       	out	0x33, r24	; 51
 444:	62 bf       	out	0x32, r22	; 50
 446:	89 b7       	in	r24, 0x39	; 57
 448:	81 60       	ori	r24, 0x01	; 1
 44a:	89 bf       	out	0x39, r24	; 57
 44c:	08 95       	ret

0000044e <Timer_start_stop>:
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	01 f1       	breq	.+64     	; 0x492 <Timer_start_stop+0x44>
 452:	28 f4       	brcc	.+10     	; 0x45e <Timer_start_stop+0x10>
 454:	88 23       	and	r24, r24
 456:	49 f0       	breq	.+18     	; 0x46a <Timer_start_stop+0x1c>
 458:	81 30       	cpi	r24, 0x01	; 1
 45a:	89 f0       	breq	.+34     	; 0x47e <Timer_start_stop+0x30>
 45c:	08 95       	ret
 45e:	84 30       	cpi	r24, 0x04	; 4
 460:	61 f1       	breq	.+88     	; 0x4ba <Timer_start_stop+0x6c>
 462:	08 f1       	brcs	.+66     	; 0x4a6 <Timer_start_stop+0x58>
 464:	85 30       	cpi	r24, 0x05	; 5
 466:	99 f1       	breq	.+102    	; 0x4ce <Timer_start_stop+0x80>
 468:	08 95       	ret
 46a:	83 b7       	in	r24, 0x33	; 51
 46c:	8e 7f       	andi	r24, 0xFE	; 254
 46e:	83 bf       	out	0x33, r24	; 51
 470:	83 b7       	in	r24, 0x33	; 51
 472:	8d 7f       	andi	r24, 0xFD	; 253
 474:	83 bf       	out	0x33, r24	; 51
 476:	83 b7       	in	r24, 0x33	; 51
 478:	8b 7f       	andi	r24, 0xFB	; 251
 47a:	83 bf       	out	0x33, r24	; 51
 47c:	08 95       	ret
 47e:	83 b7       	in	r24, 0x33	; 51
 480:	81 60       	ori	r24, 0x01	; 1
 482:	83 bf       	out	0x33, r24	; 51
 484:	83 b7       	in	r24, 0x33	; 51
 486:	8d 7f       	andi	r24, 0xFD	; 253
 488:	83 bf       	out	0x33, r24	; 51
 48a:	83 b7       	in	r24, 0x33	; 51
 48c:	8b 7f       	andi	r24, 0xFB	; 251
 48e:	83 bf       	out	0x33, r24	; 51
 490:	08 95       	ret
 492:	83 b7       	in	r24, 0x33	; 51
 494:	8e 7f       	andi	r24, 0xFE	; 254
 496:	83 bf       	out	0x33, r24	; 51
 498:	83 b7       	in	r24, 0x33	; 51
 49a:	82 60       	ori	r24, 0x02	; 2
 49c:	83 bf       	out	0x33, r24	; 51
 49e:	83 b7       	in	r24, 0x33	; 51
 4a0:	8b 7f       	andi	r24, 0xFB	; 251
 4a2:	83 bf       	out	0x33, r24	; 51
 4a4:	08 95       	ret
 4a6:	83 b7       	in	r24, 0x33	; 51
 4a8:	81 60       	ori	r24, 0x01	; 1
 4aa:	83 bf       	out	0x33, r24	; 51
 4ac:	83 b7       	in	r24, 0x33	; 51
 4ae:	82 60       	ori	r24, 0x02	; 2
 4b0:	83 bf       	out	0x33, r24	; 51
 4b2:	83 b7       	in	r24, 0x33	; 51
 4b4:	8b 7f       	andi	r24, 0xFB	; 251
 4b6:	83 bf       	out	0x33, r24	; 51
 4b8:	08 95       	ret
 4ba:	83 b7       	in	r24, 0x33	; 51
 4bc:	8e 7f       	andi	r24, 0xFE	; 254
 4be:	83 bf       	out	0x33, r24	; 51
 4c0:	83 b7       	in	r24, 0x33	; 51
 4c2:	8d 7f       	andi	r24, 0xFD	; 253
 4c4:	83 bf       	out	0x33, r24	; 51
 4c6:	83 b7       	in	r24, 0x33	; 51
 4c8:	84 60       	ori	r24, 0x04	; 4
 4ca:	83 bf       	out	0x33, r24	; 51
 4cc:	08 95       	ret
 4ce:	83 b7       	in	r24, 0x33	; 51
 4d0:	81 60       	ori	r24, 0x01	; 1
 4d2:	83 bf       	out	0x33, r24	; 51
 4d4:	83 b7       	in	r24, 0x33	; 51
 4d6:	8d 7f       	andi	r24, 0xFD	; 253
 4d8:	83 bf       	out	0x33, r24	; 51
 4da:	83 b7       	in	r24, 0x33	; 51
 4dc:	84 60       	ori	r24, 0x04	; 4
 4de:	83 bf       	out	0x33, r24	; 51
 4e0:	08 95       	ret

000004e2 <Timer_clear_state>:
}

// clear timer overflow flag
void Timer_clear_state()
{
	SETBIT(TIFR,0);
 4e2:	88 b7       	in	r24, 0x38	; 56
 4e4:	81 60       	ori	r24, 0x01	; 1
 4e6:	88 bf       	out	0x38, r24	; 56
 4e8:	08 95       	ret

000004ea <_exit>:
 4ea:	f8 94       	cli

000004ec <__stop_program>:
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__stop_program>
